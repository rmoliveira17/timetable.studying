## ams_version=1.0

Model Main_GradeHoraria {
	Section PreProcessamento {
		Procedure Proc_preprocessing {
			Body: {
				Empty P_Professor_x_Disciplina, P_DISC_x_DH;
				
				for ia in Dia_hora do
						P_DISC_x_DH(DISC) | P_Disciplina_x_diahora(DISC, ia) := val(ia);
						P_Professor_x_Disciplina(p, DISC) | P_Professor_x_Disciplina(p, DISC) = 0 := P_DisponibilidadeDocente(p, ia) AND P_Disciplina_x_diahora(DISC, ia);
				endfor;
			}
		}
		DeclarationSection Indices_auxiliares {
			Index ia;
		}
		DeclarationSection Variaveis_Preprocessamento {
			Parameter P_DISC_x_DH {
				IndexDomain: DISC;
			}
			Parameter P_Professor_x_Disciplina {
				IndexDomain: (p,DISC);
				Range: binary;
				Default: 0;
			}
		}
	}
	DeclarationSection Variaveis {
		Parameter P_Aderencia {
			IndexDomain: (DISC, p);
			Default: 0;
		}
		Parameter P_DisponibilidadeDocente {
			IndexDomain: (p, DH);
			Range: binary;
		}
		Parameter P_Lim_max_CH {
			Text: "Máxima";
			Definition: 36;
		}
		Parameter P_Lim_min_CH {
			Text: "Mínima";
			Definition: 2;
		}
		Parameter P_Cargahoraria {
			IndexDomain: DISC;
		}
		Set Professores {
			Index: p;
			Definition: {
				{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}
			}
		}
		Set Codigo_disciplinas {
			Index: DISC;
			Definition: {
				{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34}
			}
		}
		Set Dia_hora {
			Index: DH;
			Definition: {
				{11,12,21,22,31,32,41,42,51,52,61,62}
			}
		}
		Parameter P_Disciplina_x_diahora {
			IndexDomain: (DISC, DH);
			Range: binary;
		}
	}
	Section Restricoes {
		Constraint R_Teste {
			IndexDomain: (p,DISC);
			Definition: P_Professor_x_Disciplina(p,DISC) >= x(p,DISC);
		}
		Constraint R_UmaDISCporPROF {
			IndexDomain: DISC;
			Definition: {
				!Restricao - Somente uma disciplina é alocada por professor
				
				sum[p, x(p, DISC)] = 1
			}
		}
		Constraint R_CargaHorariaMaxima {
			IndexDomain: p;
			Definition: {
				! Restricao - Carga Horaria Maxima
				
				sum[DISC, P_Cargahoraria(DISC)*x(p, DISC)] <= P_Lim_max_CH
			}
		}
		Constraint R_CargaHorariaMinima {
			IndexDomain: p;
			Definition: {
				!Restricao - Carga horaria Minima
				
				sum[DISC, P_Cargahoraria(DISC)*x(p, DISC)] >= P_Lim_min_CH
			}
		}
		Constraint R_UmProfporDISC {
			IndexDomain: p;
			Definition: {
				! Um professor é alocado somente a uma disciplina por horário
				
				sum[(DISC, DH) | P_DISC_x_DH(DISC) = Val(DH), x(p, DISC)] = 1
			}
		}
	}
	Section Decisao {
		Variable Qualidade_Ensino {
			Range: free;
			Definition: sum[(DISC, p), x(p, DISC)*P_Cargahoraria(DISC)*P_Aderencia(DISC, p)];
		}
		Variable x {
			IndexDomain: (p,DISC);
			Range: binary;
		}
		MathematicalProgram Qualidade {
			Objective: Qualidade_Ensino;
			Direction: maximize;
			Constraints: AllConstraints;
			Variables: AllVariables;
			Type: Automatic;
		}
	}
	Procedure MainInitialization {
		Body: {
			Proc_preprocessing;
			
			MainExecution;
		}
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution {
		Body: {
			Solve Qualidade;
		}
	}
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: minute->s : #-># * 60;
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI."
			}
		}
	}
}
